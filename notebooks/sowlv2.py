# -*- coding: utf-8 -*-
"""SOWLv2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vX6P4KNmWoisY-Vfq6bAVunsHaLrC-AO

# SOWLv2 Demo Notebook
This notebook demonstrates the usage of **SOWLv2**, combining [OWLv2](https://huggingface.co/docs/transformers/en/model_doc/owlv2) and [SAM2](https://github.com/facebookresearch/sam2) for text-prompted object segmentation on images, folders of frames, and video.

### 1 · 🚀 Clone & Install the SOWLv2 repo
"""

# Install SOWLv2 and required packages
!pip install git+https://github.com/bladeszasza/SOWLv2.git

"""### 2 ·🧪 Utils"""

from IPython.display import HTML
from base64 import b64encode
from google.colab import files

def show_video(video_path, width=640):
    mp4 = open(video_path, 'rb').read()
    data_url = "data:video/mp4;base64," + b64encode(mp4).decode()
    return HTML(f"""
    <video width="{width}" controls>
        <source src="{data_url}" type="video/mp4">
    </video>
    """)

"""### 3 · 📷  Single Image Example
We create a sample image and run `sowlv2-detect` with a text prompt.

"""

from skimage import data
import imageio
import os

# Create a sample image (cat) using skimage
image = data.chelsea()  # a cat image
imageio.imwrite('cat.png', image)

# Run the SOWLv2 detector on the image
!sowlv2-detect --prompt "cat" --input cat.png --output output_image --threshold 0.1

# List output files
print("Output directory contents:", os.listdir('output_image'))

"""### 4 · 📁 Frames Folder Example
We create a folder with sample images and run the detector on the folder.

"""

from skimage import data
import os
import imageio

os.makedirs('frames', exist_ok=True)
# # Create sample images: astronaut (person) and camera (object)
imageio.imwrite('frames/person.png', data.astronaut())
imageio.imwrite('frames/object.png', data.camera())

# Run the detector on the frames folder
!sowlv2-detect --prompt "person" --input frames --output output_frames --threshold 0.1

# List output files
print("Output directory contents:", os.listdir('output_frames'))

"""### 5 · 🎬 Video Example
We download a small sample video and run the detector on it with a prompt.

"""

# Commented out IPython magic to ensure Python compatibility.
import os

# %rm -r output_video

# Download a sample video
!wget -O malamut.mp4 "https://dm0qx8t0i9gc9.cloudfront.net/watermarks/video/Sks4W_9Alj1v0vmgb/videoblocks-young-beautiful-female-walking-with-siberian-husky-dog-on-the-beach-woman-runs-and-plays-with-husky-dog_hxp1nfbns__4ed9e1619fcbfd31478e7384d5950220__P360.mp4"


# Run the detector on the video
!sowlv2-detect --prompt "person" --input malamut.mp4 --output output_video --threshold 0.1

# List output files (frame overlays and masks)
print("Output directory contents:", os.listdir('output_video'))

"""Large model usage, more GPU ram is needed"""

# Commented out IPython magic to ensure Python compatibility.
import os

# %rm -r output_video

# Download a sample video
!wget -O malamut.mp4 "https://dm0qx8t0i9gc9.cloudfront.net/watermarks/video/Sks4W_9Alj1v0vmgb/videoblocks-young-beautiful-female-walking-with-siberian-husky-dog-on-the-beach-woman-runs-and-plays-with-husky-dog_hxp1nfbns__4ed9e1619fcbfd31478e7384d5950220__P360.mp4"

# Run the detector on the video
!sowlv2-detect --prompt "dog" --input malamut.mp4 --output output_video --threshold 0.1 --sam-model "facebook/sam2.1-hiera-large" --owl-model "google/owlv2-large-patch14-ensemble"

# List output files (frame overlays and masks)
print("Output directory contents:", os.listdir('output_video'))

"""### 6 · 🏁 Showcase the different output videos"""

show_video('/content/output_video/obj1_overlay_video.mp4')

files.download('/content/output_video/obj1_overlay_video.mp4')

show_video('/content/output_video/obj1_mask_video.mp4')

files.download('/content/output_video/obj1_mask_video.mp4')

"""---
### 7 · 🌟 **Created with enthusiasm by Csaba Bolyòs** 🚀  

[🔗 LinkedIn](https://www.linkedin.com/in/csaba-boly%C3%B2s-00a11767/) | [🌐 Google Colab Demo](https://colab.research.google.com/drive/1vX6P4KNmWoisY-Vfq6bAVunsHaLrC-AO)  
"""